Operators

Some of these may be unfamiliar to you, but look them up anyway. Find out what they do, and if
you still canâ€™t figure it out, save it for later.

+   :   addition operator - adds the two operands

-   :   subtraction operator - subtracts second operand from the first
        unary minus - negates the operand

*   :   multiplication - multiplies the two operands

**  :   exponentiation - returns the first operand raised to the power of the second
        operand

/   :   division - returns the first operand divided by the second operand

//  :   Floor division - returns the integer part of the quotient from dividing the 
        first operand by the second 

%   :   Modulus - the remainder when dividing the fist operand by the second

<   :   Less than operator  - check if the lhs value is less than the rhs value

>   :   Greater than operator - check if the lhs value is greater than the rhs value

<=  :   Less than equal to operator - check if lhs value is less than or equal to the rhs value

>=  :   Greater than equal to operator - Check if lhs value is greater than equal to rhs value

==  :   Equality operator - Check if two operands are equal

!=  :   Not equal operator - Check if the two operands are not equal

=   :   assignment operator - assigns the right operand to the operand 

+=  :   addition assignment operator - adds the right operand to the value stored
        in the rhs variable and then assigns it to the variable

-=  :   subtraction assignment operator - subtracts the rhs value from the value 
        stored in the lhs variable and then assigns it to the variable

*=  :   multiplication assignment operator - multiplies the rhs value to the value
        stored in the lhs variable and then assigns it to the variable 

/=  :   division assignment operator - divides the value stored in the lhs variable
        by the rhs value and then assigns the quotient to the variable

//= :   floor division assignment operator - carries out floor division of the value
        stored in the lhs variable by and then assigns the result to the variable

%=  :   module assignment operator - carries out modulo operation of the value in 
        lhs variable by the rhs value and then assigns it to the lhs variable

**= :   exponentiation assignment operator - assigns the value stored in the lhs
        variable raised to the power of the rhs value, to the variable

;   :   operator that allows separation of statements on the same line

[] :    create an empty list  

{} :   create an empty dictionary

@   :   used to declare decorators - functions that take another function as 
        argument and return another function as result

,   :   separate parameters in definition of function, separate arguments when fn is
        called

:   :   used to denote the beginning of new block of code

()  :   used in function definition to hold the parameters and in function call
        to hold the arguments        

.   :   used to reference the members(attributes, functions) of an object


Data Types

For data types, write out what makes up each one. For example, with strings write
    out how you create a string. For numbers, write out a few numbers.

True    :   any number other than zero, any non empty string,

False   :   0, 0.0, 0j, None, False, any empty string, empty lists, empty tuples,
            empty sets, empty ranges range

None    :   Null value or no value at all, NoneType(data-type)

strings :   - arrays of bytes representing unicode characters
            - surrounded by "", '' or """ """ 

numbers :   int(1, 2, 3, 4......), float(0.1, 0.2, 2.3...), complex(1+j, 2+3j.....)

floats  :   (0.1, 0.5 ....)

lists   :   - store collections of data
            - store multiple items in a single variable


String Escape Sequences

For string escape sequences, use them in strings to make sure they do what you think they do.

\\      :   insert a literal backslash in a string

\'      :   insert a literal ' in a string

\"      :   insert a literal " in a string

\a      :   does nothing

\b      :   backspace

\f      :   command to make printer start printing on a new page

\n      :   new line

\r      :   carriage return

\t      :   tab

\v      :   vertical tab


String Formats

Same thing for string formats: use them in some strings to know what they do.

%d  :   inject integers

%i  :   inject integers

%o  :   inject unsigned int in octal

%u  :   inject decimal unsigned int

%x  :   inject unsigned int as a hexadecimal number. uses lower-case letters

%X  :   inject unsigned int as a hexadecimal number. uses upper-case letters

%e  :   inject double value in standard form (e notation)

%E  :   inject double value in standard form. use E, instead of e

%f  :   inject floating point values, print infinity and NaN as inf, infinity and nan

%F  :   inject floating point values, print infinity and NaN as INF, INFINITY and NAN

%g  :   - inject double in either normal or exponential notation, depending on whichever,
        is more appropriate for it's magnitude. 
        - Insignificant zeroes to the right of the decimal point are not included. 
        - Decimal point is not included on whole numbers.

%G  :   - inject double in either normal or exponential notation, depending on whichever,
        is more appropriate for it's magnitude
        - Insignificant zeroes to the right of the decimal point are not included.
        - Decimal point is not included on whole numbers.
        - Use G instead of g.

%c  :   inject char

%r  :   inject raw data of variable

%s  :   inject strings

%%  :   print a literal % char in a string


Keywords

and         :   Logical operator in python that returns true if both operands are true

del         :   Keyword - used to delete objects (everything in python is an object -
                lists, variables or parts of a list)

from        :   Keyword - used to import only a specified section from a module

not         :   Logical operator to reverse the result

while       :   Loop - execute a set of statements as long as a condition is true

as          :   used to create an alias

elif        :   check condition that follows elif if the previous conditions are not 
                true

global      :   - used to declare a global variable inside a function
                - used to change a global variable inside a function

or          :   Logical operator in python that return true if either of two operands
                are true

with        :   used when working with un-managed resources(like file-streams)

assert      :   used when debugging code to check if a condition return true
                else an assertion error is raised

else        :   catches anything not caught by the previous conditions

if          :   create branches in program flow 

pass        :   - nothing happens when encountered
                - acts as a placeholder for future code
                - avoid getting an error when empty code is not allowed

break       :   terminates the loop it appears in when it is encountered

except      :   statement - defines block of code to run if try block raises
                an error in try...except blocks

import      :   keyword - used to import modules

print       :   function - prints the specified message to output stream which
                by default is stdout.

class       :   blueprint for creating objects. 

exec        :   function - dynamic execution of python code in a string or object 
                code.

in          :   Membership operator - returns true if a sequence with the specified
                value is present in the object.

raise       :   keyword - used to raise an exception

continue    :   keyword - used to end the current iteration of the loop

finally     :   keyword - used in try...except blocks. It defines a block of code to 
                run when the try...except...else block is final

is          :   Identity operator - returns true if both objects are the same

def         :   keyword - used to create or define a function

for         :   keyword - used to create a for loop

lambda      :   keyword - create an anonymous function

try         :   keyword - to make a try...except statement

yield       :   keyword - to end a function. Returns an generator --- something like an iterator

return      :   keyword - to exit a function and return a value

