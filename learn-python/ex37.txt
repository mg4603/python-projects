Operators

Some of these may be unfamiliar to you, but look them up anyway. Find out what they do, and if
you still canâ€™t figure it out, save it for later.

+   :   addition operator - adds the two operands

-   :   subtraction operator - subtracts second operand from the first
        unary minus - negates the operand

*   :   multiplication - multiplies the two operands

**  :   exponentiation - returns the first operand raised to the power of the second
        operand

/   :   division - returns the first operand divided by the second operand

//  :   Floor division - returns the integer part of the quotient from dividing the 
        first operand by the second 

%   :   Modulus - the remainder when dividing the fist operand by the second

<   :   Less than operator  - check if the lhs value is less than the rhs value

>   :   Greater than operator - check if the lhs value is greater than the rhs value

<=  :   Less than equal to operator - check if lhs value is less than or equal to the rhs value

>=  :   Greater than equal to operator - Check if lhs value is greater than equal to rhs value

==  :   Equality operator - Check if two operands are equal

!=  :   Not equal operator - Check if the two operands are not equal

=   :   assignment operator - assigns the right operand to the operand 

+=  :   addition assignment operator - adds the right operand to the value stored
        in the rhs variable and then assigns it to the variable

-=  :   subtraction assignment operator - subtracts the rhs value from the value 
        stored in the lhs variable and then assigns it to the variable

*=  :   multiplication assignment operator - multiplies the rhs value to the value
        stored in the lhs variable and then assigns it to the variable 

/=  :   division assignment operator - divides the value stored in the lhs variable
        by the rhs value and then assigns the quotient to the variable

//= :   floor division assignment operator - carries out floor division of the value
        stored in the lhs variable by and then assigns the result to the variable

%=  :   module assignment operator - carries out modulo operation of the value in 
        lhs variable by the rhs value and then assigns it to the lhs variable

**= :   exponentiation assignment operator - assigns the value stored in the lhs
        variable raised to the power of the rhs value, to the variable

;   :   operator that allows separation of statements on the same line


Data Types

For data types, write out what makes up each one. For example, with strings write
    out how you create a string. For numbers, write out a few numbers.

True    :   any number other than zero, any non empty string,

False   :   0, 0.0, 0j, None, False, any empty string, empty lists, empty tuples,
            empty sets, empty ranges range

None    :   Null value or no value at all, NoneType(data-type)

strings :   - arrays of bytes representing unicode characters
            - surrounded by "", '' or """ """ 

numbers :   int(1, 2, 3, 4......), float(0.1, 0.2, 2.3...), complex(1+j, 2+3j.....)

floats  :   (0.1, 0.5 ....)

lists   :   - store collections of data
            - store multiple items in a single variable


String Escape Sequences

For string escape sequences, use them in strings to make sure they do what you think they do.

\\      :   insert a literal backslash in a string

\'      :   insert a literal ' in a string

\"      :   insert a literal " in a string

\a      :   does nothing

\b      :   backspace

\f      :   command to make printer start printing on a new page

\n      :   new line

\r      :   carriage return

\t      :   tab

\v      :   vertical tab


String Formats

Same thing for string formats: use them in some strings to know what they do.

%d  :   inject integers

%i  :   inject integers

%o  :   inject unsigned int in octal

%u  :   inject decimal unsigned int

%x  :   inject unsigned int as a hexadecimal number. uses lower-case letters

%X  :   inject unsigned int as a hexadecimal number. uses upper-case letters

%e  :   inject double value in standard form (e notation)

%E  :   inject double value in standard form. use E, instead of e

%f  :   inject floating point values, print infinity and NaN as inf, infinity and nan

%F  :   inject floating point values, print infinity and NaN as INF, INFINITY and NAN

%g  :   - inject double in either normal or exponential notation, depending on whichever,
        is more appropriate for it's magnitude. 
        - Insignificant zeroes to the right of the decimal point are not included. 
        - Decimal point is not included on whole numbers.

%G  :   - inject double in either normal or exponential notation, depending on whichever,
        is more appropriate for it's magnitude
        - Insignificant zeroes to the right of the decimal point are not included.
        - Decimal point is not included on whole numbers.
        - Use G instead of g.

%c  :   inject char

%r  :   inject raw data of variable

%s  :   inject strings

%%  :   print a literal % char in a string


